/* Creado/Editado por: Ciosciaa#0151. Si necesitas mas informacion, escribeme en Discord: https://discord.com/users/905553488510079026 o https://discord.gg/zpTv3qur3V*/
/* Created/Edited by: Ciosciaa#0151 If you need more information, write me on Discord: https://discord.com/users/905553488510079026 or https://discord.gg/zpTv3qur3V*/
{
	"format_version": "1.13.0",
	"minecraft:feature_rules": {
		"description": {
			"identifier": "ha:regeneration_zone_feature_rule",
			"places_feature": "ha:regeneration_zone_feature"
		},
		"conditions": {
			"placement_pass": "final_pass",
			"minecraft:biome_filter": {
				"test": "has_biome_tag",
				"value": "the_end"
			}
		},
		"distribution": {
			"iterations": "t.focus_x = 0; t.focus_z = 0; t.radius_minimum = 50; t.radius_maximum = 75; t.radius_range = t.radius_maximum - t.radius_minimum; t.angular_divisions = 4; t.angular_divisions_size = 360 / t.angular_divisions; t.angular_padding_percentage = 0.25; t.angular_content_size = t.angular_divisions_size * (1 - t.angular_padding_percentage) ; t.angular_padding_offset = t.angular_divisions_size * t.angular_padding_percentage / 2 ; t.angular_error = math.asin( 8 * math.sqrt(2) / t.radius_minimum ) * 2 ; t.angular_offset_noise = query.noise(0, 0); t.angular_offset_scale = math.pow( math.abs(t.angular_offset_noise), 1 / 2 ) ; t.angular_offset = t.angular_divisions_size * t.angular_offset_scale ; t.chunk_origin_x = math.floor(v.originx / 16) * 16; t.chunk_origin_z = math.floor(v.originz / 16) * 16; t.chunk_origin_distance = math.sqrt( math.pow( t.chunk_origin_x - t.focus_x, 2 ) + math.pow( t.chunk_origin_z - t.focus_z, 2 ) ) ; t.chunk_origin_angle = math.atan2( t.chunk_origin_z - t.focus_z, t.chunk_origin_x - t.focus_x ) ; t.sector_start = math.floor( ( t.chunk_origin_angle - t.angular_offset + t.angular_padding_offset ) / t.angular_divisions_size ) ; t.sector_start_angle = t.angular_offset + t.angular_divisions_size * t.sector_start ; t.sector_end_angle = t.sector_start_angle + t.angular_content_size ; t.sector_start_angle_error = t.sector_start_angle - t.angular_error ; t.sector_end_angle_error = t.sector_end_angle + t.angular_error ; t.sector_angular_noise = query.noise( t.sector_start_angle, t.sector_end_angle ) ; t.sector_angular_scale = math.pow( math.abs(t.sector_angular_noise), 1 / 2 ) ; t.sector_angle = t.sector_start_angle + t.angular_content_size * t.sector_angular_scale ; t.sector_radial_noise = query.noise( -t.sector_end_angle, -t.sector_start_angle ) ; t.sector_radial_scale = math.pow( math.abs(t.sector_radial_noise), 1 / 2 ) ; t.sector_radius = t.radius_minimum + t.radius_range * t.sector_radial_scale ; t.sector_target_x = t.focus_x + t.sector_radius * math.cos(t.sector_angle) ; t.sector_target_z = t.focus_z + t.sector_radius * math.sin(t.sector_angle) ; return t.sector_target_x >= t.chunk_origin_x && t.sector_target_x < t.chunk_origin_x + 16 && t.sector_target_z >= t.chunk_origin_z && t.sector_target_z < t.chunk_origin_z + 16 ;",
			"x": {
				"distribution": "uniform",
				"extent": [
					0,
					16
				]
			},
			"z": {
				"distribution": "uniform",
				"extent": [
					0,
					16
				]
			},
			"y": "query.heightmap(v.worldx, v.worldz)"
		}
	}
}